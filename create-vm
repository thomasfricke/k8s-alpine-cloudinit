#!/bin/bash -e

#   create-vm - Quickly create guest VMs using cloud image files and cloud-init.

#   Copyright 2018-2023 Earl C. Ruby III
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and

# Set VM_IMAGE_DIR environment variable to override default storage location for VMs
VM_IMAGE_DIR=${VM_IMAGE_DIR:-"${PWD}/vms/virsh"}

HOSTNAME=
IMG_FQN=
AUTH_KEYS_FQN=
RAM=4096
VCPUS=4
STORAGE=80
BRIDGE=virbr0
MAC=
VERBOSE=

usage()
{
cat << EOF
usage: $0 options

Quickly create guest VMs using cloud image files and cloud-init.

OPTIONS:
   -h      Show this message
   -n      Host name (required)
   -i      Full path and name of the base .img file to use (required)
   -k      Full path and name of the ansible user's public key file (required)
   -r      RAM in MB (defaults to ${RAM})
   -c      Number of VCPUs (defaults to ${VCPUS})
   -s      Amount of storage to allocate in GB (defaults to ${STORAGE})
   -b      Bridge interface to use (defaults to ${BRIDGE})
   -m      MAC address to use (default is to use a randomly-generated MAC)
   -u      user (defaults to ansible)
   -v      Verbose
EOF
}

while getopts "h:n:i:k:r:c:s:b:m:u:x" option; do
    case "${option}"
    in
        h)
            usage
            exit 0
            ;;
        n) HOSTNAME=${OPTARG};;
        i) IMG_FQN=${OPTARG};;
        k) AUTH_KEYS_FQN=${OPTARG};;
        r) RAM=${OPTARG};;
        c) VCPUS=${OPTARG};;
        s) STORAGE=${OPTARG};;
        b) BRIDGE=${OPTARG};;
        m) MAC=${OPTARG};;
        x) set -x;;
	u) USER=${OPTARG};;
        *)
            usage
            exit 1
            ;;
    esac
done


if [[ -z $HOSTNAME ]]; then
    echo "ERROR: Host name is required"
    usage
    exit 1
fi

if [[ -z $USER ]]; then

    USER="ansible"
fi

if [[ -z $IMG_FQN ]]; then
    echo "ERROR: Base cloud image file name is required"
    usage
    exit 1
fi

if [[ -z $AUTH_KEYS_FQN ]]; then
    echo "ERROR: ansible public key file $AUTH_KEYS_FQN not found"
    usage
    exit 1
fi

if ! [[ -f $IMG_FQN ]]; then
    echo "ERROR: $IMG_FQN file not found"
    usage
    exit 1
fi

mkdir -p "$VM_IMAGE_DIR"/{images,xml,init,base}

echo "Creating a qcow2 image file ${VM_IMAGE_DIR}/images/${HOSTNAME}.img that uses the cloud image file ${IMG_FQN} as its base"
qemu-img create -b "${IMG_FQN}" -f qcow2 -F qcow2 "${VM_IMAGE_DIR}/images/${HOSTNAME}.img" "${STORAGE}G"

echo "Creating meta-data file $VM_IMAGE_DIR/init/meta-data"
cat > "$VM_IMAGE_DIR/init/meta-data" << EOF
instance-id: ${HOSTNAME}
local-hostname: ${HOSTNAME}
EOF

echo "Creating user-data file $VM_IMAGE_DIR/init/user-data"
cat > "$VM_IMAGE_DIR/init/user-data.nope" << EOF
#cloud-config

package_update: true
package_upgrade: true
package_reboot_if_required: true

apt:
  sources:
    kubernetes.list:
      source: deb https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
      keyid: 234654DA9A296436

    docker.list:
      source: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
      keyid: 8D81803C0EBFCD88


packages:
 - cni-plugin-flannel
 - cni-plugins
 - flannel
 - flannel-contrib-cni
 - kubelet
 - kubeadm
 - kubectl
 - containerd
 - uuidgen
 - openssh

write_files:
  - path: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
  - path: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
  - path: /etc/containerd/config.toml
    content: |
      version = 2
      [plugins]
      [plugins."io.containerd.grpc.v1.cri"]
      [plugins."io.containerd.grpc.v1.cri".containerd]
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
      runtime_type = "io.containerd.runc.v2"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
      SystemdCgroup = true

#runcmd:
#  - apt-mark hold kubelet kubeadm kubectl
#  - systemctl enable containerd
#  - ip -4 --json addr show | jq -r '.[] | select(.addr_info[0].local | startswith("10.1.")) .addr_info[0].local' > /etc/node-ip
#  - echo "KUBELET_EXTRA_ARGS='--node-ip=$(hostname -i) --cloud-provider=external'" > /etc/default/kubelet
#  - systemctl daemon-reload
#  - systemctl enable kubelet
#  - kubeadm config images pull
#  - kubeadm init --pod-network-cidr=10.1.0.0/16 --apiserver-advertise-address \$(hostname -i) --control-plane-endpoint=\$(hostname -i) --upload-certs 
#  - mkdir -p ~${USER}/.kube
#  - mkdir -p /root/.kube
#  - while ! cp -i /etc/kubernetes/admin.conf /root/.kube/config ; do sleep 1 ; done
#  - cp -i /etc/kubernetes/admin.conf ~${USER}/.kube/config
#  - chown ${USER}:${USER} ~$USER/.kube/config
#  - while ! kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f https://docs.projectcalico.org/manifests/calico.yaml ; do sleep 1 ; done
#  - kubectl --kubeconfig /etc/kubernetes/admin.conf get nodes

cloud_config_modules:
  - apt-configure
  - apt-update-upgrade
  - updates-check
  - runcmd
  - write-files
  - runcmd
  - write-files

users:
  - name: ${USER}
    groups: sudo
    shell: /bin/bash
    homedir: /var/${USER}
    sudo: [ALL=(ALL) NOPASSWD:ALL]
    ssh_authorized_keys:
EOF

echo "Adding keys from the public key file $AUTH_KEYS_FQN to the user-data file"
while IFS= read -r key; do
    echo "      - $key" >> "$VM_IMAGE_DIR/init/user-data.nope"
done < <(grep -v '^ *#' < "$AUTH_KEYS_FQN")

echo "Generating the cidata ISO file $VM_IMAGE_DIR/images/${HOSTNAME}-cidata.iso"
(
    cd "$VM_IMAGE_DIR/init/"
    genisoimage \
        -output "$VM_IMAGE_DIR/images/${HOSTNAME}-cidata.img" \
        -volid cidata \
        -rational-rock \
        -joliet \
        user-data meta-data
)

MACCMD=
if [[ -n $MAC ]]; then
    MACCMD="--mac=${MAC}"
fi

virt-install \
    --name="${HOSTNAME}" \
    --network "bridge=${BRIDGE},model=virtio" $MACCMD \
    --import \
    --disk "path=${VM_IMAGE_DIR}/images/${HOSTNAME}.img,format=qcow2" \
    --disk "path=$VM_IMAGE_DIR/images/${HOSTNAME}-cidata.img,device=cdrom" \
    --ram="${RAM}" \
    --vcpus="${VCPUS}" \
    --autostart \
    --hvm \
    --arch x86_64 \
    --accelerate \
    --check-cpu \
    --osinfo detect=on,require=off \
    --force \
    --watchdog=default \
    --graphics vnc,listen=0.0.0.0 \
    --noautoconsole \
    --debug

# Make a backup of the VM's XML definition file
#virsh dumpxml "${HOSTNAME}" > "${VM_IMAGE_DIR}/xml/${HOSTNAME}.xml"

if [ -n $VERBOSE ]; then
    set +xv
fi

# Show running VMs
virsh list
